const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Valider un entretien et le sauvegarder en base
async function validateMaintenance(req, res) {
  try {
    const { vehiculeId, type, kilometrage, description } = req.body;

    console.log('üîß Validation entretien:', { vehiculeId, type, kilometrage });

    // V√©rifier que le v√©hicule existe
    const vehicule = await prisma.vehicule.findUnique({
      where: { id: parseInt(vehiculeId) }
    });

    if (!vehicule) {
      return res.status(404).json({ error: 'V√©hicule non trouv√©' });
    }

    // Mapping des nouveaux noms vers les anciens noms pour la sauvegarde
    const typeMapping = {
      'vidange': 'vidange',
      'categorie_b': 'bougies',
      'categorie_c': 'freins'
    };

    const oldType = typeMapping[type] || type;
    console.log(`üîÑ Mapping: ${type} ‚Üí ${oldType}`);

    // Sauvegarder l'entretien en base avec l'ancien nom
    const entretien = await prisma.historiqueEntretien.create({
      data: {
        vehiculeId: parseInt(vehiculeId),
        type: oldType,
        kilometrage: parseInt(kilometrage),
        description: description || `Entretien ${type} effectu√©`
      }
    });

    console.log('‚úÖ Entretien sauvegard√©:', entretien);

    // Retourner l'entretien cr√©√©
    res.status(201).json({
      message: `Entretien ${type} valid√© avec succ√®s`,
      entretien
    });

  } catch (error) {
    console.error('‚ùå Erreur validation entretien:', error);
    res.status(500).json({ error: error.message });
  }
}

// R√©cup√©rer l'historique des entretiens d'un v√©hicule
async function getMaintenanceHistory(req, res) {
  try {
    const { vehiculeId } = req.params;

    const historique = await prisma.historiqueEntretien.findMany({
      where: { vehiculeId: parseInt(vehiculeId) },
      include: {
        vehicule: {
          select: {
            immatriculation: true,
            marque: true,
            modele: true
          }
        }
      },
      orderBy: { dateEffectuee: 'desc' }
    });

    res.json({ historique });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration historique:', error);
    res.status(500).json({ error: error.message });
  }
}

// R√©cup√©rer tous les entretiens
async function getAllMaintenanceHistory(req, res) {
  try {
    const historique = await prisma.historiqueEntretien.findMany({
      include: {
        vehicule: {
          select: {
            immatriculation: true,
            marque: true,
            modele: true
          }
        }
      },
      orderBy: { dateEffectuee: 'desc' }
    });

    res.json({ historique });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration historique:', error);
    res.status(500).json({ error: error.message });
  }
}

// Supprimer un entretien sp√©cifique
async function deleteMaintenance(req, res) {
  try {
    const { id } = req.params;
    
    console.log('üóëÔ∏è Suppression entretien:', { id });

    // V√©rifier que l'entretien existe
    const entretien = await prisma.historiqueEntretien.findUnique({
      where: { id: parseInt(id) }
    });

    if (!entretien) {
      return res.status(404).json({ error: 'Entretien non trouv√©' });
    }

    // Supprimer l'entretien
    await prisma.historiqueEntretien.delete({
      where: { id: parseInt(id) }
    });

    console.log('‚úÖ Entretien supprim√©:', entretien);
    res.json({ 
      message: 'Entretien supprim√© avec succ√®s',
      deletedEntretien: entretien
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression entretien:', error);
    res.status(500).json({ error: error.message });
  }
}

// Vider tout l'historique des entretiens
async function clearAllMaintenance(req, res) {
  try {
    console.log('üóëÔ∏è Vidage de tout l\'historique des entretiens');

    // Supprimer tous les entretiens
    const result = await prisma.historiqueEntretien.deleteMany({});

    console.log('‚úÖ Historique vid√©:', result.count, 'entretiens supprim√©s');
    res.json({ 
      message: `Historique vid√© avec succ√®s (${result.count} entretiens supprim√©s)`,
      deletedCount: result.count
    });

  } catch (error) {
    console.error('‚ùå Erreur vidage historique:', error);
    res.status(500).json({ error: error.message });
  }
}

module.exports = {
  validateMaintenance,
  getMaintenanceHistory,
  getAllMaintenanceHistory,
  deleteMaintenance,
  clearAllMaintenance
}; 