const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testCalculSimple() {
  try {
    console.log('üß™ Test de calcul simple...');
    
    // 1. R√©cup√©rer les v√©hicules
    console.log('\nüìä 1. R√©cup√©ration des v√©hicules...');
    const response = await fetch('http://localhost:4000/api/admin/vehicules');
    const data = await response.json();
    
    console.log(`‚úÖ ${data.vehicules.length} v√©hicules r√©cup√©r√©s`);
    
    // 2. Analyser le premier v√©hicule
    const vehicle = data.vehicules[0];
    if (!vehicle) {
      console.log('‚ùå Aucun v√©hicule trouv√©');
      return;
    }
    
    console.log('\nüöó V√©hicule analys√©:', {
      immatriculation: vehicle.immatriculation,
      kilometrage: vehicle.kilometrage,
      weeklyKm: vehicle.weeklyKm,
      categorie: vehicle.categorie,
      historiqueCount: vehicle.historiqueEntretiens?.length || 0
    });
    
    // 3. Analyser chaque type d'entretien
    ['vidange', 'bougies', 'freins'].forEach(type => {
      const daysRemaining = vehicle[`${type}DaysRemaining`];
      const nextThreshold = vehicle[`${type}NextThreshold`];
      const kmRemaining = vehicle[`${type}KmRemaining`];
      const weeksRemaining = vehicle[`${type}WeeksRemaining`];
      
      console.log(`\nüìã ${type.toUpperCase()}:`);
      console.log(`  - Jours restants: ${daysRemaining}`);
      console.log(`  - Semaines restantes: ${weeksRemaining}`);
      console.log(`  - Prochain seuil: ${nextThreshold} km`);
      console.log(`  - Km restants: ${kmRemaining} km`);
      
      // V√©rifier la coh√©rence du calcul
      const expectedWeeks = Math.ceil(kmRemaining / vehicle.weeklyKm);
      const expectedDays = expectedWeeks * 7;
      
      console.log(`  - Calcul attendu: ${kmRemaining} km / ${vehicle.weeklyKm} km/sem = ${expectedWeeks} semaines = ${expectedDays} jours`);
      
      if (daysRemaining === expectedDays) {
        console.log(`  ‚úÖ Calcul coh√©rent`);
      } else {
        console.log(`  ‚ùå Calcul incoh√©rent: attendu ${expectedDays}, obtenu ${daysRemaining}`);
      }
      
      if (daysRemaining <= 7) {
        console.log(`  üö® URGENT: Appara√Æt sur la page des entretiens urgents`);
      } else {
        console.log(`  ‚úÖ Normal: Appara√Æt sur la page ${type}`);
      }
    });
    
    console.log('\nüéâ Test de calcul termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testCalculSimple(); 