// Test de la boucle compl√®te de synchronisation
async function testBoucleComplete() {
  try {
    console.log('üß™ Test de la boucle compl√®te de synchronisation...');
    
    // 1. R√©cup√©rer les v√©hicules actuels
    console.log('\nüìä 1. R√©cup√©ration des v√©hicules actuels...');
    const vehiclesResponse = await fetch('http://localhost:4000/api/admin/vehicules');
    const vehiclesData = await vehiclesResponse.json();
    
    console.log(`‚úÖ ${vehiclesData.vehicules.length} v√©hicules r√©cup√©r√©s`);
    
    // 2. Analyser chaque v√©hicule
    vehiclesData.vehicules.forEach((vehicle, index) => {
      console.log(`\nüöó V√©hicule ${index + 1}: ${vehicle.immatriculation}`);
      console.log('Donn√©es:', {
        kilometrage: vehicle.kilometrage,
        weeklyKm: vehicle.weeklyKm,
        historiqueCount: vehicle.historiqueEntretiens?.length || 0
      });
      
      // Analyser chaque type d'entretien
      ['vidange', 'bougies', 'freins'].forEach(type => {
        const daysRemaining = vehicle[`${type}DaysRemaining`];
        const nextThreshold = vehicle[`${type}NextThreshold`];
        
        console.log(`  ${type}:`);
        console.log(`    - Jours restants: ${daysRemaining}`);
        console.log(`    - Prochain seuil: ${nextThreshold} km`);
        
        if (daysRemaining <= 7) {
          console.log(`    üö® URGENT: Appara√Æt sur la page des entretiens urgents`);
        } else {
          console.log(`    ‚úÖ Normal: Appara√Æt sur la page ${type}`);
        }
      });
    });
    
    // 3. Simuler une validation d'entretien
    if (vehiclesData.vehicules.length > 0) {
      const vehicle = vehiclesData.vehicules[0];
      console.log(`\nüîß 2. Simulation de validation pour ${vehicle.immatriculation}...`);
      
      // Trouver un entretien urgent √† valider
      const urgentTypes = ['vidange', 'bougies', 'freins'].filter(type => {
        const daysRemaining = vehicle[`${type}DaysRemaining`];
        return daysRemaining <= 7;
      });
      
      if (urgentTypes.length > 0) {
        const typeToValidate = urgentTypes[0];
        console.log(`‚úÖ Entretien ${typeToValidate} sera valid√©`);
        
        // Simuler la validation
        const validationResponse = await fetch('http://localhost:4000/api/admin/entretiens/validate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            vehiculeId: vehicle.id,
            type: typeToValidate,
            kilometrage: vehicle.kilometrage,
            description: `Test de validation ${typeToValidate}`
          })
        });
        
        if (validationResponse.ok) {
          console.log('‚úÖ Entretien valid√© avec succ√®s');
          
          // 4. V√©rifier les donn√©es mises √† jour
          console.log('\nüîÑ 3. V√©rification des donn√©es mises √† jour...');
          const updatedVehiclesResponse = await fetch('http://localhost:4000/api/admin/vehicules');
          const updatedVehiclesData = await updatedVehiclesResponse.json();
          
          const updatedVehicle = updatedVehiclesData.vehicules.find(v => v.id === vehicle.id);
          console.log('‚úÖ V√©hicule mis √† jour:', {
            immatriculation: updatedVehicle.immatriculation,
            historiqueCount: updatedVehicle.historiqueEntretiens?.length || 0,
            [`${typeToValidate}DaysRemaining`]: updatedVehicle[`${typeToValidate}DaysRemaining`],
            [`${typeToValidate}NextThreshold`]: updatedVehicle[`${typeToValidate}NextThreshold`]
          });
          
          // 5. V√©rifier la logique de synchronisation
          console.log('\nüîç 4. V√©rification de la synchronisation...');
          const newDaysRemaining = updatedVehicle[`${typeToValidate}DaysRemaining`];
          
          if (newDaysRemaining > 7) {
            console.log(`‚úÖ CORRECT: ${typeToValidate} n'appara√Æt plus en urgent (${newDaysRemaining} jours)`);
            console.log(`‚úÖ CORRECT: ${typeToValidate} appara√Æt maintenant sur la page ${typeToValidate}`);
          } else {
            console.log(`‚ùå PROBL√àME: ${typeToValidate} appara√Æt encore en urgent (${newDaysRemaining} jours)`);
          }
          
        } else {
          console.error('‚ùå Erreur lors de la validation');
        }
      } else {
        console.log('‚ÑπÔ∏è Aucun entretien urgent trouv√© pour la simulation');
      }
    }
    
    console.log('\nüéâ Test de la boucle compl√®te termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Exporter pour utilisation dans la console du navigateur
window.testBoucleComplete = testBoucleComplete; 